[{"/home/naheem/super-quiz-app/src/index.tsx":"1","/home/naheem/super-quiz-app/src/reportWebVitals.ts":"2","/home/naheem/super-quiz-app/src/App.tsx":"3","/home/naheem/super-quiz-app/src/components/Quiz.tsx":"4","/home/naheem/super-quiz-app/src/components/QuizQuestions.tsx":"5"},{"size":554,"mtime":1695271371705,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1695271371705,"results":"8","hashOfConfig":"7"},{"size":256,"mtime":1695613600262,"results":"9","hashOfConfig":"7"},{"size":1903,"mtime":1696433078298,"results":"10","hashOfConfig":"7"},{"size":3377,"mtime":1696432698791,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"jc3ukq",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/home/naheem/super-quiz-app/src/index.tsx",[],[],[],"/home/naheem/super-quiz-app/src/reportWebVitals.ts",[],[],"/home/naheem/super-quiz-app/src/App.tsx",["30"],[],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Quiz from './components/Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Super Quiz App</h1>\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n\n","/home/naheem/super-quiz-app/src/components/Quiz.tsx",[],[],"/home/naheem/super-quiz-app/src/components/QuizQuestions.tsx",["31"],[],"// Quiz Question.tsx\nimport React, { useState, useEffect } from 'react';\nimport '../SuperQuiz.css';\n\ninterface QuestionProps {\n  questionData: {\n    imageUrl: string;\n    question: string;\n    options: string[];\n    answer: number;\n    time: number;\n  };\n  onAnswer: (isCorrect: boolean) => void;\n  onNextQuestion: () => void;\n}\n\nconst Question: React.FC<QuestionProps> = ({\n  questionData,\n  onAnswer,\n  onNextQuestion,\n}) => {\n  const [selectedOption, setSelectedOption] = useState<number | null>(null);\n  const [timer, setTimer] = useState<number>(questionData.time);\n  const [correctOption, setCorrectOption] = useState<number | null>(null);\n\n  useEffect(() => {\n    setSelectedOption(null);\n    setTimer(questionData.time);\n    setCorrectOption(null);\n  }, [questionData]);\n\n  useEffect(() => {\n    if (timer > 0) {\n      // decreasing the timer\n      const interval = setInterval(() => {\n        setTimer(timer - 1);\n      }, 1000);\n      \n  \n      return () => clearInterval(interval);\n    } else {\n      // timer as reached 0\n      if (selectedOption === null) {\n        // No option was selected before the timer ended. Answer \n        // Answer is set as false and there is 4 seconds to show the correct answer before moving to next question\n        setCorrectOption(questionData.answer);\n        handleAnswerAndDelay(false)\n\n        // handleAnswer(questionData.qid, seletionoption)\n        \n        // An option was selected before the timer ended\n\n      } else {\n        //An option was selected before the timer ended\n        // Answer is checked, set as false or true and there is 4 seconds to show the correct answer before moving to next question\n        const isCorrect = selectedOption === questionData.answer;\n        setCorrectOption(questionData.answer);\n        handleAnswerAndDelay(isCorrect)\n      }\n    }\n  }, [timer]);\n\n  // handle answer checking\n  const handleAnswer = (isCorrect: boolean) => {\n    if (selectedOption !== null) {\n      onAnswer(isCorrect);\n    }\n  };\n\n  // called the handle answer, move to next question (delayed for 4 seconds)\n  const handleAnswerAndDelay = (isSeletedOptionCorrect: boolean) => {\n    const delay = setTimeout(() => {\n      handleAnswer(isSeletedOptionCorrect);\n      onNextQuestion();\n      clearTimeout(delay);\n    }, 4000); \n\n  }\n\n  // used to change color for options\n  // yellow for selected option, red to mark the answer as wrong, and green to mark the right answer\n  const optionClass = (index: number) => {\n    if (correctOption !== null) {\n      if (correctOption === index) {\n        return 'Correct';\n      } else if (index === selectedOption ) {\n        return 'Incorrect';\n      }\n    }\n    return selectedOption === index ? 'Selected' : '';\n  };\n  \n  return (\n    <div className=\"Question\">\n      <div className=\"ImageContainer\">\n        <img src={questionData.imageUrl} alt=\"Question\" className=\"Image\" />\n      </div>\n      <h2>{questionData.question}</h2>\n      <div className=\"Options\">\n        {questionData.options.map((option, index) => (\n          <button\n            key={index}\n            className={`Option ${optionClass(index)}`}\n            onClick={() => setSelectedOption(index)}\n            disabled={timer <= 0}\n          >\n            {option}\n          </button>\n        ))}\n      </div>\n      <p>Time Remaining: {timer} seconds</p>\n    </div>\n  );\n};\n\nexport default Question;\n",{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":12},{"ruleId":"36","severity":1,"message":"37","line":59,"column":6,"nodeType":"38","endLine":59,"endColumn":13,"suggestions":"39"},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleAnswerAndDelay', 'questionData.answer', and 'selectedOption'. Either include them or remove the dependency array. If 'setCorrectOption' needs the current value of 'questionData.answer', you can also switch to useReducer instead of useState and read 'questionData.answer' in the reducer.","ArrayExpression",["40"],{"desc":"41","fix":"42"},"Update the dependencies array to be: [handleAnswerAndDelay, questionData.answer, selectedOption, timer]",{"range":"43","text":"44"},[1777,1784],"[handleAnswerAndDelay, questionData.answer, selectedOption, timer]"]